{"ast":null,"code":"var _jsxFileName = \"/home/i1543/Downloads/react-memegenerator-master/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(_ref => {\n    let [key, value] = _ref;\n    return `${key}=${value}`;\n  });\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  if (meme) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        width: 200\n      },\n      src: meme,\n      alt: \"custom meme\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, template && /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: async e => {\n      e.preventDefault(); // add logic to create meme from api\n\n      const params = {\n        template_id: template.id,\n        text0: topText,\n        text1: bottomText,\n        username: \"xzk03017\",\n        password: \"xzk03017@cndps.com\"\n      };\n      const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n      const json = await response.json();\n      setMeme(json.data.url);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Meme, {\n    template: template,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    width: true,\n    placeholder: \"Pass Dailog 1\",\n    value: topText,\n    onChange: e => setTopText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Pass Dailog 2\",\n    value: bottomText,\n    onChange: e => setBottomText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"Generate Your Meme\")), !template && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Created By Preet Garg\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Choose a Meme ! L0L  \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"There are lots of here . Create your personalised Memes\"), templates.map(template => {\n    return /*#__PURE__*/React.createElement(Meme, {\n      template: template,\n      onClick: () => {\n        setTemplate(template);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    });\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/i1543/Downloads/react-memegenerator-master/src/App.js"],"names":["React","useState","useEffect","Meme","objectToQueryParam","obj","params","Object","entries","map","key","value","join","App","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","fetch","then","x","json","response","data","memes","textAlign","width","e","preventDefault","template_id","id","text0","text1","username","password","url","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x =>\n      x.json().then(response => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {template && (\n        <form\n          onSubmit={async e => {\n            e.preventDefault();\n            // add logic to create meme from api\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"xzk03017\",\n              password: \"xzk03017@cndps.com\"\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const json = await response.json();\n            setMeme(json.data.url);\n          }}\n        >\n          <Meme template={template} />\n          <input width\n            placeholder=\"Pass Dailog 1\"\n            value={topText}\n            onChange={e => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"Pass Dailog 2\"\n            value={bottomText}\n            onChange={e => setBottomText(e.target.value)}\n          />\n          <button type=\"submit\">Generate Your Meme</button>\n        </form>\n      )}\n      {!template && (\n        <>\n          <h1>Created By Preet Garg</h1>\n          <h2>Choose a Meme ! L0L  </h2>\n          <h2>There are lots of here . Create your personalised Memes</h2>\n          {templates.map(template => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}